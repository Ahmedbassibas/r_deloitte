library(readxl)
X230627_bonbons <- read_excel("C:/Users/ahmed/Downloads/230627 - bonbons.xlsx")
View(X230627_bonbons)
library(dplyr)
# Compter le nombre de produits uniques
nb_produits <- bonbons %>%
distinct(Produit) %>%
n_distinct()
View(X230627_bonbons)
View(X230627_bonbons)
library(dplyr)
bonbons <- read_excel(""C:\Users\ahmed\Downloads\230627 - bonbons.xlsx"")
bonbons <- read_excel("C:\Users\ahmed\Downloads\230627 - bonbons.xlsx")
bonbons <- read_excel("C:\Users\ahmed\Downloads\230627 - bonbons.xlsx")
bonbons <- read_excel("C:\\Users\ahmed\Downloads\230627 - bonbons.xlsx")
bonbons <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - bonbons.xlsx")
# Compter le nombre de produits différents
nb_produits <- bonbons %>%
distinct(Produit) %>%
n_distinct()
nb_produits <- bonbons %>%
distinct(Produit) %>%
n_distinct()
names(bonbons)
# Utilisez le nom de colonne correct pour "Produit"
nb_produits <- bonbons %>%
distinct(Nom_de_colonne_Produit) %>%
n_distinct()
names(bonbons)
# Utilisez le nom de colonne correct pour "Produit"
nb_produits <- bonbons %>%
distinct(Nom_de_colonne_Produit) %>%
n_distinct(bonbons)
nb_produits <- bonbons %>%
distinct(nb_Produit) %>%
n_distinct(bonbons)
# Utilisez le nom de colonne correct pour "Produit"
nb_produits <- bonbons %>%
distinct(nb_Produits) %>%
n_distinct(bonbons)
View(bonbons)
nb_produits <- bonbons %>%
distinct(produit) %>%
n_distinct(bonbons)
# Assurez-vous que le package dplyr est installé
install.packages("dplyr")
install.packages("dplyr")
# Charger le package dplyr
library(dplyr)
# Compter le nombre de produits uniques
nb_produits <- bonbons %>%
distinct(Produit) %>%
n_distinct()
# Compter le nombre de produits uniques
nb_produit <- bonbons %>%
distinct(Produit) %>%
n_distinct()
rlang::last_trace()
# Charger le package dplyr
library(dplyr)
# Créer la variable "Departement" en extrayant les deux premiers caractères du code postal
bonbons <- bonbons %>%
mutate(Departement = substr(adresse, 1, 2))
# Afficher les premières lignes de la base de données avec la nouvelle variable "Departement"
head(bonbons)
filtered_bonbons <- bonbons %>%
filter(annee >= 2015 & annee <= 2019)
top_product <- filtered_bonbons %>%
group_by(produit) %>%
summarize(Volume_Total = sum(volume)) %>%
arrange(desc(Volume_Total)) %>%
slice(1)
# Afficher le produit le plus vendu
top_product
# Calculer le chiffre d'affaires net annuel par marque
ca_net_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
ungroup()
# Calculer le chiffre d'affaires net annuel par marque
ca_net_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
ungroup()
# Calculer le chiffre d'affaires net annuel par marque
ca_net_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
ungroup()
# Calculer le chiffre d'affaires net annuel par marque
ca_net_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
ungroup()
# Calculer le volume annuel par marque
volume_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Volume_Annuel = sum(volume)) %>%
ungroup()
# Calculer le taux de croissance annuel pour le chiffre d'affaires net et le volume
ca_net_annuel <- ca_net_annuel %>%
mutate(Taux_Croissance_CA_Net = (Chiffre_Affaires_Net / lag(Chiffre_Affaires_Net, default = first(Chiffre_Affaires_Net))) - 1)
volume_annuel <- volume_annuel %>%
mutate(Taux_Croissance_Volume = (Volume_Annuel / lag(Volume_Annuel, default = first(Volume_Annuel))) - 1)
# Afficher les résultats
ca_net_annuel
`print(n = 23)`
print(n = ...)`
print(n = ...)`
print(n = i)`
print(ca_net_annuel, n = 23)
print(ca_net_annuel, n = 23)
library(tidyr)
ca_net_annuel_marque <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
pivot_wider(names_from = marque, values_from = Chiffre_Affaires_Net, names_prefix = "CA_") %>%
ungroup()
# Afficher la table résumée
ca_net_annuel_marque
options(max.print = Inf)
bonbons <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - bonbons.xlsx")
bonbons <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - bonbons.xlsx")
library(dplyr)
bonbons <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - bonbons.xlsx")
library(readxl)
X230627_bonbons <- read_excel("C:/Users/ahmed/Downloads/230627 - bonbons.xlsx")
View(X230627_bonbons)
bonbons <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - bonbons.xlsx")
# Charger le package dplyr
library(dplyr)
nb_produits <- bonbons %>%
distinct(Produit) %>%
n_distinct()
# Afficher le résultat
nb_produits
# Charger le package dplyr
library(dplyr)
bonbons <- bonbons %>%
mutate(Departement = substr(adresse, 1, 2))
# Afficher les premières lignes de la base de données avec la nouvelle variable "Departement"
head(bonbons)
# Filtrer les données pour la période 2015-2019
filtered_bonbons <- bonbons %>%
filter(annee >= 2015 & annee <= 2019)
top_product <- filtered_bonbons %>%
group_by(produit) %>%
summarize(Volume_Total = sum(volume)) %>%
arrange(desc(Volume_Total)) %>%
slice(1)
# Afficher le produit le plus vendu
top_product
ca_net_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
ungroup()
volume_annuel <- bonbons %>%
group_by(annee, marque) %>%
summarize(Volume_Annuel = sum(volume)) %>%
ungroup()
ca_net_annuel <- ca_net_annuel %>%
mutate(Taux_Croissance_CA_Net = (Chiffre_Affaires_Net / lag(Chiffre_Affaires_Net, default = first(Chiffre_Affaires_Net))) - 1)
volume_annuel <- volume_annuel %>%
mutate(Taux_Croissance_Volume = (Volume_Annuel / lag(Volume_Annuel, default = first(Volume_Annuel))) - 1)
ca_net_annuel
volume_annuel
ca_net_annuel_marque <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
pivot_wider(names_from = marque, values_from = Chiffre_Affaires_Net, names_prefix = "CA_") %>%
ungroup()
library(tidyr)
ca_net_annuel_marque <- bonbons %>%
group_by(annee, marque) %>%
summarize(Chiffre_Affaires_Net = sum(ca_net)) %>%
pivot_wider(names_from = marque, values_from = Chiffre_Affaires_Net, names_prefix = "CA_") %>%
ungroup()
# Afficher la table résumée
ca_net_annuel_marque
library(dplyr)
library(tidyr)
volume_annuel_marque <- bonbons %>%
group_by(annee, marque) %>%
summarize(Volume_Annuel = sum(volume)) %>%
pivot_wider(names_from = marque, values_from = Volume_Annuel, names_prefix = "Volume_") %>%
ungroup()
# Afficher la table résumée
volume_annuel_marque
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
# Calculer le taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
# Calculer le taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- bonbons %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
ca_net_annuel_marque
# Calculer le taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2019 / CA_2015)^(1/(2019-2015)) - 1)
# Vérifier les colonnes disponibles dans la table ca_net_annuel_marque
names(ca_net_annuel_marque)
# Modifier le calcul du taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2018 / CA_2015)^(1/(2018-2015)) - 1)
# Calculer le taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
# Calculer le taux de croissance annuel pour le chiffre d'affaires net
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
# Calculer le taux de croissance annuel pour le volume
volume_annuel_marque <- volume_annuel_marque %>%
mutate(Taux_Croissance_Volume = (Volume_2020 / Volume_2010)^(1/(2020-2010)) - 1)
ca_net_annuel_marque <- ca_net_annuel_marque %>%
mutate(Taux_Croissance_CA = (CA_2020 / CA_2010)^(1/(2020-2010)) - 1)
filtered_bonbons <- bonbons %>%
filter(annee >= 2010 & annee <= 2020)
clients_without_fraises_tagada <- filtered_bonbons %>%
filter(produit == "Fraises Tagada") %>%
pull(client) %>%
unique()
all_clients <- bonbons %>%
pull(client) %>%
unique()
rlang::last_trace()
# Afficher les clients qui n'ont jamais consommé de Fraises Tagada
clients_never_consumed_fraises_tagada
clients_never_consumed_fraises_tagada <- setdiff(all_clients, clients_without_fraises_tagada)
# Afficher les clients qui n'ont jamais consommé de Fraises Tagada
clients_never_consumed_fraises_tagada
library(readxl)
X230627_pokemon_1 <- read_excel("C:/Users/ahmed/Downloads/230627 - pokemon_1.xlsx")
View(X230627_pokemon_1)
pokemon_1 <- read_excel("C:\Users\ahmed\Downloads\230627 - pokemon_1.xlsx")
pokemon_1 <- read_excel("C:\\Users\\ahmed\\Downloads\\230627 - pokemon_1.xlsx")
# Vérifier s'il y a des doublons dans la base
doublons <- pokemon_1 %>%
duplicated()
duplicated()
doublons <- pokemon_1 %>%
duplicated()
# Vérifier s'il y a des doublons dans la base
doublons <- pokemon_1 %>%
duplicated()
# Compter le nombre de doublons
nb_doublons <- sum(doublons)
nb_doublons <- sum(doublons)
lignes_doublons <- pokemon_1[doublons, ]
# Afficher le nombre total de doublons et les lignes correspondantes
cat("Nombre de doublons :", nb_doublons, "\n")
cat("Lignes contenant des doublons :\n")
print(lignes_doublons)
pokemon_candidat <- unique(pokemon_1)
pokemon_candidat[, sapply(pokemon_candidat, is.numeric)] <- lapply(pokemon_candidat[, sapply(pokemon_candidat, is.numeric)], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
nb_pokemon_premiere_generation <- sum(pokemon_candidat$generation == 1)
pokemon_candidat <- unique(pokemon_1)
pokemon_candidat <- pokemon_candidat[, c("id", "name", "generation", "type_1", "type_2", "total_points")]
pokemon_premiere_generation <- pokemon_candidat[pokemon_candidat$generation == 1, ]
nb_pokemon_premiere_generation <- nrow(pokemon_premiere_generation)
nb_pokemon_premiere_generation <- sum(pokemon_candidat$generation == 1)
print(nb_pokemon_premiere_generation)
# Count the number of Pokémon in the first generation
nb_pokemon_premiere_generation <- nrow(pokemon_premiere_generation)
Remove duplicates
pokemon_2_gen <- pokemon_candidat %>% filter(generation %in% c(1, 2))
pokemon_normal <- pokemon_2_gen %>% filter(type1 == "normal" | type2 == "normal")
nb_pokemon_normal <- nrow(pokemon_normal)
print(nb_pokemon_normal)
count_odd_numbers <- function(vector) {
count <- 0
for (num in vector) {
if (num %% 2 != 0) {
count <- count + 1
}
}
return(count)
}
# Génération aléatoire du vecteur vec
vec <- sample(1:100, 100, replace = TRUE)
# Application de la fonction count_odd_numbers sur le vecteur vec
odd_count <- count_odd_numbers(vec)
# Affichage du résultat
print(paste("Nombre d'entiers impairs dans le vecteur vec :", odd_count))
